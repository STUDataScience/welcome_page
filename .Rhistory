# set our working directory
setwd("~/Google Drive/welcome_page/")
# render your site
rmarkdown::render_site()
# set our working directory
setwd("~/Google Drive/welcome_page/")
# render your site
rmarkdown::render_site()
# set our working directory
setwd("~/Google Drive/welcome_page/")
# render your site
rmarkdown::render_site()
# set our working directory
setwd("~/Google Drive/welcome_page/")
# render your site
rmarkdown::render_site()
# set our working directory
setwd("~/Google Drive/welcome_page/")
# render your site
rmarkdown::render_site()
# set our working directory
setwd("~/Google Drive/welcome_page/")
# render your site
rmarkdown::render_site()
# set our working directory
setwd("~/Google Drive/welcome_page/")
# render your site
rmarkdown::render_site()
# set our working directory
setwd("~/Google Drive/welcome_page/")
# render your site
rmarkdown::render_site()
# set our working directory
setwd("~/Google Drive/welcome_page/")
# render your site
rmarkdown::render_site()
library(MASS)
data(biopsy)
library(MASS)
library(tidyverse)
data(biopsy)
glimpse(biopsy)
library(MASS)
library(tidyverse)
data(biopsy)
glimpse(biopsy)
biopsy$ID <- NULL
names(biopsy) <- c("thick", "u.size", "u.shape",
"adhsn", "s.size", "nucl",
"chrom", "n.nuc", "mit", "class")
biopsy.v2 <- na.omit(biopsy)
y <- ifelse(biopsy$class == "malignant", 1, 0)
ggplot(biopsy.v2, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~variable, ncol = 3)
biop.m <- melt(biopsy.v2, id.var = "class")
biop.m <- melt(biopsy.v2, id.var = "class")
library(reshape2)
biop.m <- melt(biopsy.v2, id.var = "class")
# library(reshape2)
biop.m <- gather(biopsy.v2, id.var = "class")
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~variable, ncol = 3)
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~variable, ncol = 3)
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
# library(reshape2)
biop.m <- gather(biopsy.v2, id.var = "class")
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
# library(reshape2)
biop.m <- gather(biopsy.v2)
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
biop.m <- biopsy.v2 %>%
gather(variable, class)
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
ggplot(biop.m, aes(x=class, y = variable)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
View(biopsy.v2)
# reorganize the data
biop.m <- biopsy.v2 %>%
gather("class")
View(biop.m)
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot()
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ class, ncol = 3)
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
# reorganize the data
biop.m <- biopsy.v2 %>%
gather("variable", "value")
# reorganize the data
biop.m <- biopsy.v2 %>%
gather("variable")
# reorganize the data
biop.m <- biopsy.v2 %>%
gather("variable")
# reorganize the data
biop.m <- biopsy.v2 %>%
gather("variable")
# reorganize the data
biop.m <- biopsy.v2 %>%
gather("class", "variable")
View(biop.m)
# reorganize the data
biop.m <-  %>%
# reorganize the data
biop.m <- gather(biopsy.v2, "class")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, "class")
colname(biop.m) <- c("class", "variable", "value")
# reorganize the data
biop.m <- gather(biopsy.v2, "class")
colnames(biop.m) <- c("class", "variable", "value")
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
# reorganize the data
biop.m <- gather(biopsy.v2, variable = "class")
#colnames(biop.m) <- c("class", "variable", "value")
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, key = "class", variable = "value")
# reorganize the data
biop.m <- gather(biopsy.v2, key = "class")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, variable = "class")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, key = "class")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, key = "class", "variable")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2,  "variable", key = "class")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, key = "class")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, variable = "class")
#colnames(biop.m) <- c("class", "variable", "value")
help(gather)
# reorganize the data
biop.m <- gather(biopsy.v2, key = "class")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, key = "variable")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, class, key = "variable")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
# reorganize the data
biop.m <- gather(biopsy.v2, class, key = "variable")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, "class", key = "variable")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, "value", key = "variable")
#colnames(biop.m) <- c("class", "variable", "value")
# reorganize the data
biop.m <- gather(biopsy.v2, "class", key = "variable", value = "value")
#colnames(biop.m) <- c("class", "variable", "value")
# reorganize the data
biop.m <- gather(biopsy.v2, "class", key = "variable", value = "value")
#colnames(biop.m) <- c("class", "variable", "value")
# reorganize the data
biop.m <- gather(biopsy.v2, key = "class", value = "variable")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, key = "class", value = "value")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, key = "variable", value = "value")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, "class")
#colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
# reorganize the data
biop.m <- gather(biopsy.v2, "class")
colnames(biop.m) <- c("class", "variable", "value")
View(biop.m)
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
library(corrplot)
library(corrplot)
install.packages("corrplot")
library(corrplot)
bc <- cor(biopsy.v2[, 1:9]) #create an object of the features
library(corrplot)
bc <- cor(biopsy.v2[, 1:9]) #create an object of the features
corrplot.mixed(bc)
set.seed(123)  # random number generator
ind <- sample(2, nrow(biopsy.v2), replace = TRUE, prob = c(0.7, 0.3)
set.seed(123)  # random number generator
ind <- sample(2, nrow(biopsy.v2), replace = TRUE, prob = c(0.7, 0.3))
train <- biopsy.v2[ind==1, ]  #the training set
test <- biopsy.v2[ind==2, ]   # the testing set
dim(train)
dim(test)
dim(train)
dim(test)
table(train$class)
table(test$class)
full.fit <- glm(class ~ . , family = binomial, data = train)
summary(full.fit)
exp(coeff(full.fit))
exp(coeff(full.fit))
exp(coef(full.fit))
exp(coef(full.fit))
train.probs <- predict(full.fit, type = "response")
train.probs <- predict(full.fit, type = "response")
# inspect the first 5 probabilities
train.probs[1:5]
trainY <- y[ind==1]
testY <- y[ind==2]
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
library(car)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
library(caret)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
train.probs <- predict(full.fit, type = "response")
# inspect the first 5 probabilities
train.probs[1:5]
library(caret)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
y <- ifelse(biopsy$class == "malignant", 1, 0)
library(caret)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
train.probs <- predict(full.fit, type = "response")
# inspect the first 5 probabilities
train.probs[1:5]
library(caret)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
library(caret)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(testY, train.probs)
install.packages("InformationValue")
library(InformationValue)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(testY, train.probs)
library(InformationValue)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(testY, train.probs)
library(MASS)
library(tidyverse)
data(biopsy)
glimpse(biopsy)
biopsy$ID <- NULL
names(biopsy) <- c("thick", "u.size", "u.shape",
"adhsn", "s.size", "nucl",
"chrom", "n.nuc", "mit", "class")
biopsy.v2 <- na.omit(biopsy)
y <- ifelse(biopsy$class == "malignant", 1, 0)
# reorganize the data
biop.m <- gather(biopsy.v2, "class")
colnames(biop.m) <- c("class", "variable", "value")
# create boxplots
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
library(corrplot)
bc <- cor(biopsy.v2[, 1:9]) #create an object of the features
corrplot.mixed(bc)
set.seed(123)  # random number generator
ind <- sample(2, nrow(biopsy.v2), replace = TRUE, prob = c(0.7, 0.3))
train <- biopsy.v2[ind==1, ]  #the training set
test <- biopsy.v2[ind==2, ]   # the testing set
dim(train)
dim(test)
table(train$class)
table(test$class)
full.fit <- glm(class ~ . , family = binomial, data = train)
summary(full.fit)
exp(coef(full.fit))
train.probs <- predict(full.fit, type = "response")
# inspect the first 5 probabilities
train.probs[1:5]
library(InformationValue)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(testY, train.probs)
library(InformationValue)
trainY <- y[ind==1]
testY <- y[ind==2]
optimalCutoff(trainY, train.probs)
confusionMatrix(testY, train.probs)
library(InformationValue)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(testY, train.probs)
library(InformationValue)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
library(InformationValue)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
train.probs <- predict(full.fit, type = "response")
# inspect the first 5 probabilities
train.probs[1:5]
train.probs <- predict(full.fit, type = "response")
# inspect the first 5 probabilities
train.probs[1:5]
View(biopsy.v2)
y <- ifelse(biopsy.v2$class == "malignant", 1, 0)
library(InformationValue)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
library(caret)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
library(InformationValue)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
library(caret)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
library(InformationValue)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
library(InformationValue)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
library(caret)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
help(billboard)
??billboard
library(billboard)
data(package = billboard)
data()
??spotify_track_data
# set our working directory
setwd("~/Google Drive/welcome_page/")
# render your site
rmarkdown::render_site()
# set our working directory
setwd("~/Google Drive/welcome_page/")
# render your site
rmarkdown::render_site()
# set our working directory
setwd("~/Google Drive/welcome_page/")
# render your site
rmarkdown::render_site()
misClassError(trainY, train.probs)
test.probs <- predict(full.fit, newdata = test, type = "response")
misClassError(testY, test.probs)
confusionMatrix(testY, test.probs)
library(MASS)
library(tidyverse)
data(biopsy)
glimpse(biopsy)
biopsy$ID <- NULL
names(biopsy) <- c("thick", "u.size", "u.shape",
"adhsn", "s.size", "nucl",
"chrom", "n.nuc", "mit", "class")
biopsy.v2 <- na.omit(biopsy)
y <- ifelse(biopsy.v2$class == "malignant", 1, 0)
# reorganize the data
biop.m <- gather(biopsy.v2, "class")
colnames(biop.m) <- c("class", "variable", "value")
# create boxplots
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
library(corrplot)
bc <- cor(biopsy.v2[, 1:9]) #create an object of the features
corrplot.mixed(bc)
set.seed(123)  # random number generator
ind <- sample(2, nrow(biopsy.v2), replace = TRUE, prob = c(0.7, 0.3))
train <- biopsy.v2[ind==1, ]  #the training set
test <- biopsy.v2[ind==2, ]   # the testing set
dim(train)
dim(test)
table(train$class)
table(test$class)
full.fit <- glm(class ~ . , family = binomial, data = train)
summary(full.fit)
exp(coef(full.fit))
train.probs <- predict(full.fit, type = "response")
# inspect the first 5 probabilities
train.probs[1:5]
library(caret)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
misClassError(trainY, train.probs)
test.probs <- predict(full.fit, newdata = test, type = "response")
# misclassification error
misClassError(testY, test.probs)
# confusion matrix
confusionMatrix(testY, test.probs)
library(MASS)
library(ISLR)
library(MASS)
names(Boston)
lm.fit <- lm(medv~lstat, data = Boston)
library(MASS)
# In this problem we use a nonlinear transformation of the predictors
quadFit <- lm(medv~lstat+I(lstat^2))
library(MASS)
# In this problem we use a nonlinear transformation of the predictors
quadFit <- lm(medv~lstat+I(lstat^2), data = Boston)
# ...
library(MASS)
library(tidyverse)
data(biopsy)
glimpse(biopsy)
biopsy$ID <- NULL
names(biopsy) <- c("thick", "u.size", "u.shape",
"adhsn", "s.size", "nucl",
"chrom", "n.nuc", "mit", "class")
biopsy.v2 <- na.omit(biopsy)
y <- ifelse(biopsy.v2$class == "malignant", 1, 0)
# reorganize the data
biop.m <- gather(biopsy.v2, "class")
colnames(biop.m) <- c("class", "variable", "value")
# create boxplots
ggplot(biop.m, aes(x=class, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, ncol = 3)
library(corrplot)
bc <- cor(biopsy.v2[, 1:9]) #create an object of the features
corrplot.mixed(bc)
set.seed(123)  # random number generator
ind <- sample(2, nrow(biopsy.v2), replace = TRUE, prob = c(0.7, 0.3))
train <- biopsy.v2[ind==1, ]  #the training set
test <- biopsy.v2[ind==2, ]   # the testing set
dim(train)
dim(test)
table(train$class)
table(test$class)
full.fit <- glm(class ~ . , family = binomial, data = train)
summary(full.fit)
exp(coef(full.fit))
train.probs <- predict(full.fit, type = "response")
# inspect the first 5 probabilities
train.probs[1:5]
library(caret)
trainY <- y[ind==1]
testY <- y[ind==2]
confusionMatrix(trainY, train.probs)
misClassError(trainY, train.probs)
test.probs <- predict(full.fit, newdata = test, type = "response")
# misclassification error
misClassError(testY, test.probs)
# confusion matrix
confusionMatrix(testY, test.probs)
